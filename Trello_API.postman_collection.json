{
	"info": {
		"_postman_id": "8bfc0b1a-7020-4996-babc-59776ea4641e",
		"name": "Trello_API",
		"description": "Desafio API Trello\n\n1 - Gerar Token de usuários;\n\n2 - Criar e editar cards;\n\n3 - Excluir cards.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Board",
			"item": [
				{
					"name": "Create Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"idBoard\", jsonData.id);\r",
									"console.log(jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{trelloEnv}}/boards/?name=Desafio",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "Desafio"
								}
							]
						},
						"description": "Create a new board."
					},
					"response": []
				},
				{
					"name": "Get a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{trelloEnv}}/boards/{{idBoard}}",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"boards",
								"{{idBoard}}"
							]
						},
						"description": "Request a single board."
					},
					"response": []
				},
				{
					"name": "Update a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{trelloEnv}}/boards/{{idBoard}}?name=Desafio Update",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"boards",
								"{{idBoard}}"
							],
							"query": [
								{
									"key": "name",
									"value": "Desafio Update"
								}
							]
						},
						"description": "Update an existing board by id"
					},
					"response": []
				}
			],
			"description": "## Boards"
		},
		{
			"name": "List",
			"item": [
				{
					"name": "Create a List on a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"idList\", jsonData.id);\r",
									"console.log(jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{trelloEnv}}/boards/{{idBoard}}/lists?name=Criar Lista",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"boards",
								"{{idBoard}}",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "Criar Lista"
								}
							]
						},
						"description": "Create a new List on a Board."
					},
					"response": []
				},
				{
					"name": "Get a list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{trelloEnv}}/lists/{{idList}}",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"lists",
								"{{idList}}"
							]
						},
						"description": "Get information about a List"
					},
					"response": []
				},
				{
					"name": "Get List on a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{trelloEnv}}/boards/{{idBoard}}/lists",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"boards",
								"{{idBoard}}",
								"lists"
							]
						},
						"description": "Get the Lists on a Board"
					},
					"response": []
				}
			]
		},
		{
			"name": "Card",
			"item": [
				{
					"name": "Create Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"idCard\", jsonData.id);\r",
									"console.log(jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{trelloEnv}}/cards?idList={{idList}}",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"cards"
							],
							"query": [
								{
									"key": "idList",
									"value": "{{idList}}"
								}
							]
						},
						"description": "Create a new card"
					},
					"response": []
				},
				{
					"name": "Update Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{trelloEnv}}/cards/{{idCard}}?name=Desafio API Trello&desc=Descrição Desafio API Trello",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"cards",
								"{{idCard}}"
							],
							"query": [
								{
									"key": "name",
									"value": "Desafio API Trello"
								},
								{
									"key": "desc",
									"value": "Descrição Desafio API Trello"
								}
							]
						},
						"description": "Update a card"
					},
					"response": []
				},
				{
					"name": "Get Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{trelloEnv}}/cards/{{idCard}}",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"cards",
								"{{idCard}}"
							]
						},
						"description": "Get a card by its ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Errors Message",
			"item": [
				{
					"name": "Create Card - Wrong List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"invalid value for idList\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{trelloEnv}}/cards?idList=xxx",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"cards"
							],
							"query": [
								{
									"key": "idList",
									"value": "xxx"
								}
							]
						},
						"description": "Message to Wrong List creating a card"
					},
					"response": []
				},
				{
					"name": "Update Card - Wrong Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"invalid id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{trelloEnv}}/cards/xxx?name=Criar Card",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"cards",
								"xxx"
							],
							"query": [
								{
									"key": "name",
									"value": "Criar Card"
								}
							]
						},
						"description": "Message to Wrong Card updating a card"
					},
					"response": []
				},
				{
					"name": "Get Card - Wrong Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"invalid id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{trelloEnv}}/cards/xxx",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"cards",
								"xxx"
							]
						},
						"description": "Message to Wrong Card getting a card"
					},
					"response": []
				},
				{
					"name": "Delete a Card - Wrong Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"     pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"invalid id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{trelloEnv}}/cards/xxx",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"cards",
								"xxx"
							]
						},
						"description": "Delete a Card"
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Delete a Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{trelloEnv}}/cards/{{idCard}}",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"cards",
								"{{idCard}}"
							]
						},
						"description": "Delete a Card"
					},
					"response": []
				},
				{
					"name": "Delete a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{trelloEnv}}/boards/{{idBoard}}",
							"host": [
								"{{trelloEnv}}"
							],
							"path": [
								"boards",
								"{{idBoard}}"
							]
						},
						"description": "Delete a Board"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth1",
		"oauth1": [
			{
				"key": "tokenSecret",
				"value": "{SECRET}",
				"type": "string"
			},
			{
				"key": "token",
				"value": "{TOKEN}",
				"type": "string"
			},
			{
				"key": "consumerSecret",
				"value": "{SECRET}",
				"type": "string"
			},
			{
				"key": "consumerKey",
				"value": "{API-KEY}",
				"type": "string"
			},
			{
				"key": "addParamsToHeader",
				"value": true,
				"type": "boolean"
			},
			{
				"key": "signatureMethod",
				"value": "HMAC-SHA1",
				"type": "string"
			},
			{
				"key": "version",
				"value": "1.0",
				"type": "string"
			},
			{
				"key": "addEmptyParamsToSign",
				"value": false,
				"type": "boolean"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "idBoard",
			"value": ""
		},
		{
			"key": "idList",
			"value": ""
		},
		{
			"key": "idCard",
			"value": ""
		}
	]
}